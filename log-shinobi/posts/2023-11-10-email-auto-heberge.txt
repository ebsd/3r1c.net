email auto hébergé
2023-11-10

Intro
=====

Plusieurs options.
Pour la réception :
- mail4one : un serveur smtp + pop. Livraison au format maildir. Il n'y
  a pas d'envoi possible. Il faut utiliser un service tiers (pourquoi
pas c'est beaucoup plus simple).
- postfix + dovecot : serveur smtp et serveur imap avec authentification
  sasl.

Pour l'envoi :
- mail4one : il faudra utiliser un service tiers comme smtp2go.
- postfix + dovecot : postfix peut relayer les mails directement à
  d'autres serveurs de messagerie d'internet. Il serait aussi possible
d'utiliser un smarthost comme smtp2go.

mail4one
========

Je parviens désormais à recevoir mes mails seulement avec un script /
service en en envoi gratuit pour 1000 mails par mois. Pour la réception
mail4one [1] ne prévoit pas de check spf et dkim, donc ceci peut
engendrer du spam. Mais peut python : mail4one [1]. L'envoi se fait avec
le service smtp2go [2] qui propose être qu'un postgrey serait une
solution palliative ? 

Notons que mail4one propose aussi un serveur pop3. Malheureusement, il
ne semble pas compatible avec tous les clients mails. K9 et Thunderbird
ont été testés. En revanche, mutt ne peut pas récupérer les mails par
exemple. Mais ce n'est pas grave puisque on peut utiliser munt à travers
ssh avec : `ssh -t user@server mutt`.

La documentation mail4one [1] est très correcte. Elle permet de démarrer
son propre serveur mail en quelques minutes.

[1]: https://gitlab.com/balki/mail4one
[2]: https://support.smtp2go.com/hc/en-gb/articles/223087947-Free-Plan
[3]: https://github.com/mail4one/mail4one/tree/main/deploy_configs

Client mail mutt pour utiliser smtp2go
=======================================

Configurer mutt pour pointer sur le dossiers /var/mails, et utiliser le
relais smtp de smtp2go.
```
# Vim comme éditeur
set editor = "vim -c 'set tw=72' -c 'set wrap'"
set folder="/var/lib/mail4one/mails/all"
set mask="!^\\.[^.]"
set mbox="/var/lib/mail4one/mails/all"
set record="+.Sent"
set postponed="+.Drafts"
set spoolfile="/var/lib/mail4one/mails/all"
# Adresse électronique de l'expéditeur
set from="Eric <site@3r1c.net>"
# Nom complet de l'expéditeur
set realname = "Eric"
# Génération du champs from
set use_from = yes
set smtp_url = "smtp://user:password@mail.smtp2go.com:587"
set ssl_starttls = yes
set edit_headers=yes
set markers=no
```

Config mutt
===========

~/.muttrc
set editor = "vim -c 'set tw=72' -c 'set wrap'"
set edit_headers=yes
set markers=no
set mbox_type = Maildir
set folder = ~/Maildir/
set spoolfile = +/
set realname = "eric"
set from = "eric@3r1c.net"
set use_envelope_from = yes
set edit_headers = yes # Will allow us to change the from address from Mutt
set record = +/sent/
set sort = threads
auto_view text/html # view html automatically
alternative_order text/plain text/enriched text/html


postfix
=======

Une installation debian.

sudo apt install postfix mailutils rsyslog

Note: rsyslog est nécessaire pour produire les mail.log

Lors de l'installation, choisir un type "Internet Site".
Puis lors de la demande du "system mail name", indiquer votre domaine de
messagerie.
Voilà, à partir de ce point, notre serveur peut déjà envoyer du
courrier. Mais attention, on risque d'être "vu" comme un spammeur car on
a rien configurer du tout. En particulier, DMARC (SPF + DKIM) qui
permette d'authentifier la source des emails. C'est pas très difficile à
mettre en place. On va voir ça plus tard. Pour éviter de se compliquer
la vie, l'utilisation d'un smarthost pour envoyer le courrier permet de
s'affranchir de ces questions de configuration pour rendrei (plus)
"légitime" notre serveur de messagerie.
On peut tester un envoi de mail ainsi, mais il y a de très fortes chance
qu'on finisse dans le dossier spam :

echo "Salut, ça joue ?"  | mail -s "Email depuis mon serveur"
toi@email-externe.com 

Reverse DNS (rDNS)
------------------

Très important pour un serveur de mail, le reverse DNS. Il doit être
configurer pour refléter votre nom de domaine sur les IPv4 et IPv6 de votre
serveur.

Pour un serveur VPS OVH par exemple, suivre ce document [1].

[1]: https://help.ovhcloud.com/csm/en-vps-configure-reverse-dns?id=kb_article_view&sysparm_article=KB0047602

DKIM
----

OpenDKIM va nous permettre de signer nos mails. C'est quasiment
obligatoire maintenant.

sudo apt install opendkim opendkim-tools

Générer un clé DKIM

mkdir -p /etc/postfix/dkim
opendkim-genkey -D /etc/postfix/dkim/ -d example.org -s mail
chgrp opendkim /etc/postfix/dkim/*
chmod g+r /etc/postfix/dkim/*

Informons OpenDKIM que nous avons créé une clé privée.

echo "mail._domainkey.example.org example.org:mail:/etc/postfix/dkim/mail.private" > /etc/postfix/dkim/keytable

Créons une "signing table"

echo "*@example.org mail._domainkey.example.org" > /etc/postfix/dkim/signingtable

Ajoutons les "trusted hosts"

echo "127.0.0.1
10.1.0.0/16
1.2.3.4/24" > /etc/postfix/dkim/trustedhosts

Configurons /etc/opendkim.conf. Attention, une ligne "Socket" existe
déjà, il faudra donc la commenter.

KeyTable file:/etc/postfix/dkim/keytable
SigningTable refile:/etc/postfix/dkim/signingtable
InternalHosts refile:/etc/postfix/dkim/trustedhosts

Canonicalization        relaxed/simple
Socket                  inet:12301@localhost

Configurer postfix à l'aide de ces commandes :

postconf -e "myhostname = $(cat /etc/mailname)"
postconf -e "milter_default_action = accept"
postconf -e "milter_protocol = 6"
postconf -e "smtpd_milters = inet:localhost:12301"
postconf -e "non_smtpd_milters = inet:localhost:12301"

Note : on vérifie la config postfix avec :

postconf -p

Redémarrer postfix et opendkim.

systemctl restart opendkim
systemctl enable opendkim
systemctl reload postfix

Configurer un enregistrement dns TXT pour DKIM :
Utiliser cette commande pour obtenir l'enregistrement.

echo -e "

v=DKIM1; k=rsa; $(tr -d "
" </etc/postfix/dkim/mail.txt | sed "s/k=rsa.* \"p=/k=rsa; p=/;s/\"\s*\"//;s/\"\s*).*//" | grep -o "p=.*")

"

Le nom de l'hôte pour cet enregistrement TXT est : mail._domainkey

DMARC
-----

Créer l'utilisateur dmarc

useradd -m -G mail dmarc

Ajouter un enregistrement DNS TXT dont vous obtiendrez le contenu avec
cette commande :

echo "_dmarc.$(cat /etc/mailname)"
echo "v=DMARC1; p=reject; rua=mailto:dmarc@$(cat /etc/mailname); fo=1"

La 1ere ligne de la sortie de la commande correspond au nom d'hôte de
l'enregistrement TXT.
La seconde ligne correspond au contenu de l'enregistrement.

SPF
---

Il suffit de créer un enregistrement dns TXT dont vous obtiendrez le
contenu avec cette commande :

cat /etc/mailname
echo "v=spf1 mx a:mail.$(cat /etc/mailname) -all"

Tester dmarc, dkim et spf
-------------------------

Avec ce site https://appmaildev.com/en/spf 
On vous demande d'envoyez un mail sur une adresse. Par exemple faire
ceci :

echo "salut" | mail -s "test" -r vous@example.org test-xxxxxx@appmaildev.com

En principe, SPF, DKIM et DMARC devrait avoir un état "PASS".

Hardening postfix
-----------------

postconf -e 'smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination, reject_unknown_recipient_domain'

echo "/^Received:.*/     IGNORE
/^X-Originating-IP:/    IGNORE
/^User-Agent:/        IGNORE
/^X-Mailer:/        IGNORE" >> /etc/postfix/header_checks

postconf -e "header_checks = regexp:/etc/postfix/header_checks"

Config fail2ban
...............

apt-get install fail2ban

cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local



Et alimenter jail.local avec

[postfix]

enabled  = true
port     = smtp,ssmtp,submission
filter   = postfix
logpath  = /var/log/mail.log


[sasl]

enabled  = true
port     = smtp,ssmtp,submission,imap2,imap3,imaps,pop3,pop3s
filter   = postfix-sasl
# You might consider monitoring /var/log/mail.warn instead if you are
# running postfix since it would provide the same log lines at the
# "warn" level but overall at the smaller filesize.
logpath  = /var/log/mail.warn
maxretry = 1
bantime  = 21600

[dovecot]

enabled = true
port    = smtp,ssmtp,submission,imap2,imap3,imaps,pop3,pop3s
filter  = dovecot
logpath = /var/log/mail.log


Puis :

$ systemctl restart fail2ban

Lire ses mails directement depuis le serveur ou IMAP ?
------------------------------------------------------

Maintenant on a le choix :
- soit on lit les mails directement sur le serveur avec mutt ou alpine
  par exemple (configurer postfix pour livrer dans des maildirs)
- soit on installe un serveur IMAP comme dovecot

postfix dans des maildirs
-------------------------

L'idée est de configurée un "catchall" pour que toutes les adresses du
domaine soit dirigée dans une seule boîte. Il ne sera donc pas
nécessaire de configurer multiples comptes.

Dans cette config, un dossier Maildir est créé dans le /home de
l'utilisateur.

$ postconf -e "home_mailbox = Maildir/"
$ echo "@example.org root" > /etc/postfix/virtual
$ postmap /etc/postfix/virtual
$ postconf -e "virtual_alias_maps = hash:/etc/postfix/virtual"
$ systemctl restart postfix

Maintenant on peut lire nos mails depuis le compte root (ce n'est pas
une bonne idée, il faudrait créé un autre user unix) avec cette commande
:

$ mutt -f ~/Maildir/


Améliorer postix
----------------

Utilisons des certificats publiques pour chiffrer nos cannaux de
communications.

$ apt install certbot
$ certbot certonly --standalone -d example.org


$ postconf -e 'smtpd_tls_cert_file = /etc/letsencrypt/live/<your.domain>/fullchain.pem'
$ postconf -e 'smtpd_tls_key_file = /etc/letsencrypt/live/<your.domain>/privkey.pem'

$ postconf -e "smtp_use_tls=yes"



